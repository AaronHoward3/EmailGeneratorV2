service: sb-email-generator

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 300 # 5 minutes for email generation
  environment:
    NODE_ENV: ${self:provider.stage}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY, ''}
    BRANDDEV_API_KEY: ${env:BRANDDEV_API_KEY, ''}
    S3_REGION: ${env:AWS_REGION, ''}
    S3_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID, ''}
    S3_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY, ''}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME, ''}
    SUPABASE_URL: ${env:SUPABASE_URL, ''}
    SUPABASE_SERVICE_KEY: ${env:SUPABASE_SERVICE_KEY, ''}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
          Resource: 
            - "arn:aws:s3:::${env:S3_BUCKET_NAME, '*'}/hero_images/*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - route53:GetHostedZone
            - route53:ChangeResourceRecordSets
            - route53:ListResourceRecordSets
          Resource: 
            - "arn:aws:route53:::hostedzone/*"

custom:
  customDomain:
    domainName: mjml-generator-service.springbot.com
    stage: ${self:provider.stage}
    createRoute53Record: true
    createRoute53IPv6Record: false
    endpointType: 'regional'
    securityPolicy: tls_1_2
    autoDomain: true
    autoDomainWaitFor: 120

functions:
  api:
    handler: handler.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY
          cors: true
      - httpApi:
          path: /
          method: GET
          cors: true
    environment:
      FUNCTION_NAME: ${self:service}-${self:provider.stage}
    reservedConcurrency: 50 # Allow up to 50 concurrent executions

plugins:
  - serverless-domain-manager

package:
  patterns:
    - '!node_modules/.prisma/**'
    - '!node_modules/@prisma/client/libquery_engine-*'
    - '!node_modules/prisma/libquery_engine-*'
    - '!scripts/**'
    - '!test-data/**'
    - '!public/**'
    - '!.env*'
    - '!amplify.yml'
    - '!README.md'
    - '!.git/**'

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}
        Description: API Gateway for ${self:service}
        EndpointConfiguration:
          Types:
            - REGIONAL
    ApiGatewayMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
        HttpMethod: ANY
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambdaFunction.Arn}/invocations"
          TimeoutInMillis: 300000
          RequestTemplates:
            application/json: |
              {
                "body": $input.json('$'),
                "headers": {
                  #foreach($header in $input.params().header.keySet())
                  "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end
                  #end
                },
                "method": "$context.httpMethod",
                "params": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($param)" #if($foreach.hasNext),#end
                  #end
                },
                "query": {
                  #foreach($queryParam in $input.params().querystring.keySet())
                  "$queryParam": "$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end
                  #end
                }
              } 