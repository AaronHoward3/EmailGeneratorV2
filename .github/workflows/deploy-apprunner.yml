name: Deploy to AWS App Runner

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: sbemailgenerator
  APP_RUNNER_SERVICE: sb-email-generator

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Only deploy on push to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Verify ECR image exists
        run: |
          echo "Verifying Docker image exists in ECR..."
          IMAGE_URI="${{ steps.build-image.outputs.image }}"
          
          # Check if the image exists in ECR
          if ! aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=${{ github.sha }} 2>/dev/null; then
            echo "❌ Image with tag ${{ github.sha }} not found in ECR repository $ECR_REPOSITORY"
            exit 1
          fi
          
          if ! aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=latest 2>/dev/null; then
            echo "❌ Image with tag 'latest' not found in ECR repository $ECR_REPOSITORY"
            exit 1
          fi
          
          echo "✅ Docker images verified in ECR"
          
          # Verify IAM role exists and has correct permissions
          echo "Verifying IAM role configuration..."
          ROLE_ARN="${{ secrets.APP_RUNNER_ACCESS_ROLE_ARN }}"
          
          if ! aws iam get-role --role-name $(echo $ROLE_ARN | cut -d'/' -f2) 2>/dev/null; then
            echo "❌ IAM role not found: $ROLE_ARN"
            exit 1
          fi
          
          echo "✅ IAM role verified"
          
          # Check if App Runner service name is available
          echo "Checking if service name is available..."
          if aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE }}'].ServiceArn" --output text | grep -q .; then
            echo "⚠️ Service name '${{ env.APP_RUNNER_SERVICE }}' already exists"
          else
            echo "✅ Service name '${{ env.APP_RUNNER_SERVICE }}' is available"
          fi

      - name: Deploy to App Runner
        run: |
          # Check if App Runner service exists by name first
          EXISTING_SERVICE=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE }}'].ServiceArn" --output text 2>/dev/null || echo "")
          
          if [ ! -z "$EXISTING_SERVICE" ]; then
            echo "Found existing App Runner service: $EXISTING_SERVICE"
            
            # Check service status
            SERVICE_STATUS=$(aws apprunner describe-service --service-arn "$EXISTING_SERVICE" --query 'Service.Status' --output text)
            echo "Current service status: $SERVICE_STATUS"
            
            if [ "$SERVICE_STATUS" = "CREATE_FAILED" ]; then
              echo "Service creation failed. Attempting to delete failed service..."
              aws apprunner delete-service --service-arn "$EXISTING_SERVICE" 2>/dev/null || true
              
              # Don't wait for deletion - just proceed immediately
              echo "Proceeding with new service creation immediately..."
              
              # Create new service
              echo "Creating new App Runner service..."
              if ! aws apprunner create-service \
                --service-name ${{ env.APP_RUNNER_SERVICE }} \
                --source-configuration '{
                  "ImageRepository": {
                    "ImageIdentifier": "${{ steps.build-image.outputs.image }}",
                    "ImageConfiguration": {
                      "Port": "3000"
                    },
                    "ImageRepositoryType": "ECR"
                  },
                  "AuthenticationConfiguration": {
                    "AccessRoleArn": "${{ secrets.APP_RUNNER_ACCESS_ROLE_ARN }}"
                  }
                }' \
                --instance-configuration '{
                  "Cpu": "1024",
                  "Memory": "2048"
                }' \
                --output json > service-output.json 2>create-error.log; then
                
                echo "❌ Service creation command failed!"
                echo "Error output:"
                cat create-error.log
                exit 1
              fi
              
              # Check if the service was created successfully
              if [ ! -f service-output.json ] || [ ! -s service-output.json ]; then
                echo "❌ Service creation failed - no output file generated"
                exit 1
              fi
              
              # Validate the JSON output
              if ! jq empty service-output.json 2>/dev/null; then
                echo "❌ Service creation failed - invalid JSON output"
                cat service-output.json
                exit 1
              fi
            else
              # Wait for service to be in a stable state before updating
              echo "Checking service status..."
              while true; do
                SERVICE_STATUS=$(aws apprunner describe-service --service-arn "$EXISTING_SERVICE" --query 'Service.Status' --output text)
                echo "Current service status: $SERVICE_STATUS"
                
                if [ "$SERVICE_STATUS" = "RUNNING" ] || [ "$SERVICE_STATUS" = "FAILED" ]; then
                  echo "Service is in stable state, proceeding with update..."
                  break
                else
                  echo "Service is still in progress, waiting 30 seconds..."
                  sleep 30
                fi
              done
              
              echo "Updating existing App Runner service: $EXISTING_SERVICE"
              aws apprunner update-service \
                --service-arn "$EXISTING_SERVICE" \
                --source-configuration '{
                  "ImageRepository": {
                    "ImageIdentifier": "${{ steps.build-image.outputs.image }}",
                    "ImageConfiguration": {
                      "Port": "3000"
                    },
                    "ImageRepositoryType": "ECR"
                  },
                  "AuthenticationConfiguration": {
                    "AccessRoleArn": "${{ secrets.APP_RUNNER_ACCESS_ROLE_ARN }}"
                  }
                }'
              
              # Save the service ARN for future deployments
              echo "$EXISTING_SERVICE" > service-output.json
            fi
          else
            echo "Creating new App Runner service..."
            if ! aws apprunner create-service \
              --service-name ${{ env.APP_RUNNER_SERVICE }} \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ steps.build-image.outputs.image }}",
                  "ImageConfiguration": {
                    "Port": "3000"
                  },
                  "ImageRepositoryType": "ECR"
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "${{ secrets.APP_RUNNER_ACCESS_ROLE_ARN }}"
                }
              }' \
              --instance-configuration '{
                "Cpu": "1024",
                "Memory": "2048"
              }' \
              --output json > service-output.json 2>create-error.log; then
              
              echo "❌ Service creation command failed!"
              echo "Error output:"
              cat create-error.log
              exit 1
            fi
            
            # Check if the service was created successfully
            if [ ! -f service-output.json ] || [ ! -s service-output.json ]; then
              echo "❌ Service creation failed - no output file generated"
              exit 1
            fi
            
            # Validate the JSON output
            if ! jq empty service-output.json 2>/dev/null; then
              echo "❌ Service creation failed - invalid JSON output"
              cat service-output.json
              exit 1
            fi
          fi
          
          # Extract service ARN for future deployments
          if [ -f service-output.json ]; then
            # Check if the file contains JSON or just a plain ARN
            if grep -q '"Service"' service-output.json; then
              # File contains JSON, extract ARN from it
              SERVICE_ARN=$(cat service-output.json | jq -r '.Service.ServiceArn')
            else
              # File contains just the ARN as plain text
              SERVICE_ARN=$(cat service-output.json)
            fi
            echo "Service ARN: $SERVICE_ARN"
          fi

      - name: Wait for deployment to complete
        run: |
          if [ -f service-output.json ]; then
            SERVICE_ARN=$(cat service-output.json | jq -r '.Service.ServiceArn')
          else
            SERVICE_ARN=${{ secrets.APP_RUNNER_SERVICE_ARN }}
          fi
          
          echo "Waiting for deployment to complete..."
          
          # Poll the service status until it's running
          while true; do
            STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.Status' --output text)
            echo "Service status: $STATUS"
            
            if [ "$STATUS" = "RUNNING" ]; then
              echo "Service is now running!"
              break
            elif [ "$STATUS" = "CREATE_FAILED" ]; then
              echo "❌ Service creation failed! Getting detailed error information..."
              
              # Get detailed service information including error details
              SERVICE_INFO=$(aws apprunner describe-service --service-arn $SERVICE_ARN --output json)
              
              # Extract specific error information
              ERROR_MESSAGE=$(echo "$SERVICE_INFO" | jq -r '.Service.ServiceStatusMessage // "No error message available"')
              echo "❌ Error message: $ERROR_MESSAGE"
              
              # Get service events for more details (limited output)
              echo "📋 Service events summary:"
              aws apprunner list-operations --service-arn $SERVICE_ARN --query 'OperationSummaryList[].[Id,Status,Type,StartedAt]' --output table || echo "Could not retrieve service events"
              
              # Get the latest operation details (limited output)
              LATEST_OP_ID=$(aws apprunner list-operations --service-arn $SERVICE_ARN --query 'OperationSummaryList[0].Id' --output text 2>/dev/null || echo "")
              if [ ! -z "$LATEST_OP_ID" ]; then
                echo "🔍 Latest operation error details:"
                aws apprunner describe-operation --operation-arn $LATEST_OP_ID --query 'Operation.{Status:Status,Type:Type,ErrorMessage:ErrorMessage,StartedAt:StartedAt,EndedAt:EndedAt}' --output table || echo "Could not retrieve operation details"
              fi
              
              echo "❌ Deployment failed! Exiting with error code 1"
              exit 1
            elif [ "$STATUS" = "FAILED" ]; then
              echo "❌ Service deployment failed!"
              
              # Get detailed service information
              SERVICE_INFO=$(aws apprunner describe-service --service-arn $SERVICE_ARN --output json)
              ERROR_MESSAGE=$(echo "$SERVICE_INFO" | jq -r '.Service.ServiceStatusMessage // "No error message available"')
              echo "❌ Error message: $ERROR_MESSAGE"
              
              exit 1
            else
              echo "Waiting for service to be ready..."
              sleep 30
            fi
          done
          
          # Get service URL
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.ServiceUrl' --output text)
          echo "Service URL: $SERVICE_URL"

      - name: Test deployment
        run: |
          if [ -f service-output.json ]; then
            SERVICE_ARN=$(cat service-output.json | jq -r '.Service.ServiceArn')
          else
            SERVICE_ARN=${{ secrets.APP_RUNNER_SERVICE_ARN }}
          fi
          
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.ServiceUrl' --output text)
          echo "Testing service at: $SERVICE_URL"
          
          # Wait a bit for the service to be fully ready
          sleep 30
          
          # Test the health endpoint
          curl -f "$SERVICE_URL/" || exit 1
          echo "✅ Service is responding!"

  test-deployment:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get service URL and test
        run: |
          SERVICE_ARN=${{ secrets.APP_RUNNER_SERVICE_ARN }}
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.ServiceUrl' --output text)
          echo "Service URL: $SERVICE_URL"
          
          # Test the API endpoint
          echo "Testing API endpoint..."
          curl -f "$SERVICE_URL/api/generate-emails" -X POST -H "Content-Type: application/json" -d '{"test": true}' || echo "API endpoint test completed"
          
          echo "✅ App Runner deployment successful!"
          echo "🌐 Service URL: $SERVICE_URL" 