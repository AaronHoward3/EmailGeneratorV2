name: Deploy to AWS App Runner

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: sbemailgenerator
  APP_RUNNER_SERVICE: sb-email-generator

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Only deploy on push to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to App Runner
        run: |
          # Check if App Runner service exists by name first
          EXISTING_SERVICE=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE }}'].ServiceArn" --output text 2>/dev/null || echo "")
          
          if [ ! -z "$EXISTING_SERVICE" ]; then
            echo "Updating existing App Runner service: $EXISTING_SERVICE"
            aws apprunner update-service \
              --service-arn "$EXISTING_SERVICE" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ steps.build-image.outputs.image }}",
                  "ImageConfiguration": {
                    "Port": "3000"
                  },
                  "ImageRepositoryType": "ECR"
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "${{ secrets.APP_RUNNER_ACCESS_ROLE_ARN }}"
                }
              }'
            
            # Save the service ARN for future deployments
            echo "$EXISTING_SERVICE" > service-output.json
          else
            echo "Creating new App Runner service..."
            aws apprunner create-service \
              --service-name ${{ env.APP_RUNNER_SERVICE }} \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ steps.build-image.outputs.image }}",
                  "ImageConfiguration": {
                    "Port": "3000"
                  },
                  "ImageRepositoryType": "ECR"
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "${{ secrets.APP_RUNNER_ACCESS_ROLE_ARN }}"
                }
              }' \
              --instance-configuration '{
                "Cpu": "1024",
                "Memory": "2048"
              }' \
              --output json > service-output.json
          fi
          
          # Extract service ARN for future deployments
          if [ -f service-output.json ]; then
            # Check if the file contains JSON or just a plain ARN
            if grep -q '"Service"' service-output.json; then
              # File contains JSON, extract ARN from it
              SERVICE_ARN=$(cat service-output.json | jq -r '.Service.ServiceArn')
            else
              # File contains just the ARN as plain text
              SERVICE_ARN=$(cat service-output.json)
            fi
            echo "Service ARN: $SERVICE_ARN"
          fi

      - name: Wait for deployment to complete
        run: |
          if [ -f service-output.json ]; then
            SERVICE_ARN=$(cat service-output.json | jq -r '.Service.ServiceArn')
          else
            SERVICE_ARN=${{ secrets.APP_RUNNER_SERVICE_ARN }}
          fi
          
          echo "Waiting for deployment to complete..."
          
          # Poll the service status until it's running
          while true; do
            STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.Status' --output text)
            echo "Service status: $STATUS"
            
            if [ "$STATUS" = "RUNNING" ]; then
              echo "Service is now running!"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Service deployment failed!"
              exit 1
            else
              echo "Waiting for service to be ready..."
              sleep 30
            fi
          done
          
          # Get service URL
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.ServiceUrl' --output text)
          echo "Service URL: $SERVICE_URL"

      - name: Test deployment
        run: |
          if [ -f service-output.json ]; then
            SERVICE_ARN=$(cat service-output.json | jq -r '.Service.ServiceArn')
          else
            SERVICE_ARN=${{ secrets.APP_RUNNER_SERVICE_ARN }}
          fi
          
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.ServiceUrl' --output text)
          echo "Testing service at: $SERVICE_URL"
          
          # Wait a bit for the service to be fully ready
          sleep 30
          
          # Test the health endpoint
          curl -f "$SERVICE_URL/" || exit 1
          echo "‚úÖ Service is responding!"

  test-deployment:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get service URL and test
        run: |
          SERVICE_ARN=${{ secrets.APP_RUNNER_SERVICE_ARN }}
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.ServiceUrl' --output text)
          echo "Service URL: $SERVICE_URL"
          
          # Test the API endpoint
          echo "Testing API endpoint..."
          curl -f "$SERVICE_URL/api/generate-emails" -X POST -H "Content-Type: application/json" -d '{"test": true}' || echo "API endpoint test completed"
          
          echo "‚úÖ App Runner deployment successful!"
          echo "üåê Service URL: $SERVICE_URL" 